Level penyelesaian Aplikasi

~Admin
13/9/2022
-sign in
-change password
14/9/2022
-add new Agency-delete Agency
-detail Agency
-update profile Agency
-update username Agency
-update password Agency
-signout
-request from this Agency
-doned request
15/9/2022
-request 5 desc index.php
-request.php
-fix created_at -> updated_at (ganti value created_at)
18/9/2022
-connect devices
-transfer device
-disconnect device active/checking
-adoption history (not FIX)
18/9/2022 (malam)
-adoption history (FIX)
-history device current user
-overview status & device list
19/9/2022
-perbaiki options transfer (bug) solusi=hidden option
-details agency (devices list) -transfer
-details agency (devices list) -disconnect
-count adopt devices agency.php
-count devices device-production.php
21/9/2022
-tampilkan data akhir dari history berdasar id_device
-tampilkan lokasi di map (belum fix sinyal lemah)
23/09/2022
-fix device production saat daftar dan device sudah memberikan history maka ubah checking -> active


~Agency
11/9/2022
- sign in
- sign up
- change password
13/9/2022
- create request
- show request
23/9/2022 (pagi buta)
-overview device list & history lists
- mapping.php (device list) & mapp
- device.php (device list)
- history.php (history list)
- add clear cookie saat sign out
23/9/2022 (malam)
-pair device
setting GET nodeMCU
SELECT history.id FROM history INNER JOIN devices ON devices.id = history.id_device WHERE devices.code = '123456' AND history.id IN (SELECT MAX(history.id) FROM history GROUP BY history.id_device) AND id_user IS NULL AND status IS NULL AND adopt IS NULL
pair : 
UPDATE history SET id_user = $IDuser, status = 'TRF', adopt = $IDuser WHERE id = $ID
-device hanya mengirim id_device, volume, lat, long




CODE ARDUINO NODE MCU
~blink base LED

~blink LED (https://www.instructables.com/NodeMCU-Basic-Project-Blink-a-LED/)
#define LED D1 // Led in NodeMCU at pin GPIO16 (D0).

void setup() {
  pinMode(LED, OUTPUT);     // Initialize the LED_BUILTIN pin as an output
}

// the loop function runs over and over again forever
void loop() {
  digitalWrite(LED, LOW);   // Turn the LED on (Note that LOW is the voltage level
  // but actually the LED is on; this is because
  // it is active low on the ESP-01)
  delay(1000);                      // Wait for a second
  digitalWrite(LED, HIGH);  // Turn the LED off by making the voltage HIGH
  delay(2000);                      // Wait for two seconds (to demonstrate the active low LED)
}

~Sensor Ultrasonic (https://techatronic.com/hc-sr04-ultrasonic-sensor-working-with-esp8266-nodemcu/)
const int trigPin = D3; 
const int echoPin = D4; 

long duration;
int distance;

void setup() {
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  Serial.begin(9600);
}

void loop() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);

  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  duration = pulseIn(echoPin, HIGH);

  distance= duration*0.034/2;

  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  delay(500);
}

~Modul GPS (https://circuitdigest.com/microcontroller-projects/interfacing-gps-with-nodemcu-esp12)
#include <TinyGPS++.h>
#include <SoftwareSerial.h>
#include <ESP8266WiFi.h>

TinyGPSPlus gps;  // The TinyGPS++ object
SoftwareSerial ss(4, 5); // The serial connection to the GPS device
const char* ssid = "shashi";
const char* password = "12345678";

float latitude , longitude;
int year , month , date, hour , minute , second;
String date_str , time_str , lat_str , lng_str;
int pm;

WiFiServer server(80);

void setup()

{
  Serial.begin(115200);
  ss.begin(9600);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED)

  {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  server.begin();
  Serial.println("Server started");

  // Print the IP address
  Serial.println(WiFi.localIP());


}

void loop()

{
  while (ss.available() > 0)
    if (gps.encode(ss.read()))
    {
      if (gps.location.isValid())
      {
        latitude = gps.location.lat();
        lat_str = String(latitude , 6);
        longitude = gps.location.lng();
        lng_str = String(longitude , 6);
      }

      if (gps.date.isValid())
      {

        date_str = "";
        date = gps.date.day();
        month = gps.date.month();
        year = gps.date.year();

        if (date < 10)

          date_str = '0';

        date_str += String(date);


        date_str += " / ";


        if (month < 10)

          date_str += '0';

        date_str += String(month);


        date_str += " / ";


        if (year < 10)

          date_str += '0';

        date_str += String(year);

      }


      if (gps.time.isValid())

      {

        time_str = "";

        hour = gps.time.hour();

        minute = gps.time.minute();

        second = gps.time.second();


        minute = (minute + 30);

        if (minute > 59)

        {

          minute = minute - 60;

          hour = hour + 1;

        }

        hour = (hour + 5) ;

        if (hour > 23)

          hour = hour - 24;



        if (hour >= 12)

          pm = 1;

        else

          pm = 0;


        hour = hour % 12;



        if (hour < 10)

          time_str = '0';

        time_str += String(hour);


        time_str += " : ";


        if (minute < 10)

          time_str += '0';

        time_str += String(minute);


        time_str += " : ";


        if (second < 10)

          time_str += '0';

        time_str += String(second);


        if (pm == 1)

          time_str += " PM ";

        else

          time_str += " AM ";


      }


    }

  // Check if a client has connected

  WiFiClient client = server.available();

  if (!client)

  {

    return;

  }


  // Prepare the response

  String s = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n <!DOCTYPE html> <html> <head> <title>GPS Interfacing with NodeMCU</title> <style>";

  s += "a:link {background-color: YELLOW;text-decoration: none;}";

  s += "table, th, td {border: 1px solid black;} </style> </head> <body> <h1  style=";

  s += "font-size:300%;";

  s += " ALIGN=CENTER> GPS Interfacing with NodeMCU</h1>";

  s += "<p ALIGN=CENTER style=""font-size:150%;""";

  s += "> <b>Location Details</b></p> <table ALIGN=CENTER style=";

  s += "width:50%";

  s += "> <tr> <th>Latitude</th>";

  s += "<td ALIGN=CENTER >";

  s += lat_str;

  s += "</td> </tr> <tr> <th>Longitude</th> <td ALIGN=CENTER >";

  s += lng_str;

  s += "</td> </tr> <tr>  <th>Date</th> <td ALIGN=CENTER >";

  s += date_str;

  s += "</td></tr> <tr> <th>Time</th> <td ALIGN=CENTER >";

  s += time_str;

  s += "</td>  </tr> </table> ";

 

  

  if (gps.location.isValid())

  {

     s += "<p align=center><a style=""color:RED;font-size:125%;"" href=""http://maps.google.com/maps?&z=15&mrt=yp&t=k&q=";

    s += lat_str;

    s += "+";

    s += lng_str;

    s += """ target=""_top"">Click here!</a> To check the location in Google maps.</p>";

  }


  s += "</body> </html> \n";


  client.print(s);

  delay(100);


}

~ Modul GPS BY ME
#include <TinyGPS++.h>
#include <SoftwareSerial.h>
#include <ESP8266WiFi.h>

#define LED D5 // Led in NodeMCU at pin GPIO16 (D0).

TinyGPSPlus gps;  // The TinyGPS++ object

SoftwareSerial ss(4, 5); // The serial connection to the GPS device

const char* ssid = "STTM-TU";
const char* password = "Abcd1234";

float latitude , longitude;
String lat_str , lng_str;

WiFiServer server(80);

void setup(){
  pinMode(LED, OUTPUT);

  Serial.begin(115200);
  ss.begin(9600);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED){
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");

  server.begin();
  Serial.println("Server started");

  // Print the IP address
  Serial.println(WiFi.localIP());
}

void loop(){
  digitalWrite(LED, LOW);

  while (ss.available() > 0){
    if (gps.encode(ss.read())){
      if (gps.location.isValid()){
        latitude = gps.location.lat();
        lat_str = String(latitude , 6);
        longitude = gps.location.lng();
        lng_str = String(longitude , 6);

        digitalWrite(LED, HIGH);
        delay(1000);  // Turn the LED off by making the voltage HIGH
        digitalWrite(LED, LOW);
        delay(1000);

        Serial.println("GPS Signal Found!");
        Serial.print("Latitude : ");
        Serial.println(lat_str);
        Serial.print("Longitude : ");
        Serial.println(lng_str);
        Serial.println("");
      }
    }
  }

  // Check if a client has connected
  WiFiClient client = server.available();

  if (!client){
    return;
  }

  // Prepare the response
  String s = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n <!DOCTYPE html> <html> <head> <title>GPS Interfacing with NodeMCU</title> <style>";
  s += "a:link {background-color: YELLOW;text-decoration: none;}";
  s += "table, th, td {border: 1px solid black;} </style> </head> <body> <h1  style=";
  s += "font-size:300%;";
  s += " ALIGN=CENTER> GPS Interfacing with NodeMCU</h1>";
  s += "<p ALIGN=CENTER style=""font-size:150%;""";
  s += "> <b>Location Details";
  s += "</b></p> <table ALIGN=CENTER style=";
  s += "width:50%";
  s += "> <tr> <th>Latitude</th>";
  s += "<td ALIGN=CENTER >";
  s += lat_str;
  s += "</td> </tr> <tr> <th>Longitude</th> <td ALIGN=CENTER >";
  s += lng_str;
  s += "</td>  </tr> </table> ";

  if (gps.location.isValid()){
    s += "<p align=center><a style=""color:RED;font-size:125%;"" href=""http://maps.google.com/maps?&z=15&mrt=yp&t=k&q=";
    s += lat_str;
    s += "+";
    s += lng_str;
    s += """ target=""_top"">Click here!</a> To check the location in Google maps.</p>";
  }

  s += "</body> </html> \n";

  client.print(s);
  delay(1000);

}


~~KIRIM DATA VIA GET RESPOND dengan WIFI
#include <ESP8266WiFi.h>
#include <WiFiClient.h> 
#include <ESP8266WebServer.h>
#include <ESP8266HTTPClient.h>
#include <math.h>

/* Set these to your desired credentials. */
const char* ssid = "POCO X3";  //ENTER YOUR WIFI SETTINGS
const char* password = "12345678";

//Web/Server address to read/write from 
//website or IP address of server

void setup() {
  delay(1000);
  Serial.begin(115200);
  WiFi.mode(WIFI_OFF);        //Prevents reconnection issue (taking too long to connect)
  delay(1000);
  WiFi.mode(WIFI_STA);        //This line hides the viewing of ESP as wifi hotspot

  WiFi.begin(ssid, password);     //Connect to your WiFi router
  Serial.println("");

  Serial.print("Connecting");
  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  //If connection successful show IP address in serial monitor
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());  //IP address assigned to your ESP
}

//=======================================================================
//                    Main Program Loop
//=======================================================================

void loop() {
  HTTPClient http;    //Declare object of class HTTPClient
  WiFiClient wifi;    //Declare object of class WiFiClient

  String code = "MAHMUD", getData, Link, Url = "192.168.21.147";
  int volume = 34;
  String latitude = "-6.3991224", longitude = "106.9659016";

  //GET Data
  getData = "code='" + code + "'&volume=" + volume + "&lat=" + latitude + "&long=" + longitude ;  //Note "?" //added at front
  Link = "http://" + Url + "/binTracker/create_history.php?createHistory=1&" + getData;

  http.begin(wifi, Link);     //Specify request destination

  int httpCode = http.GET();            //Send the request
  String payload = http.getString();    //Get the response payload

  Serial.println(httpCode);   //Print HTTP return code
  Serial.println(payload);    //Print request response payload

  http.end();  //Close connection

  delay(5000);  //GET Data at every 5 seconds
}


~~ ALL IN MODULE
#include <TinyGPS++.h>
#include <SoftwareSerial.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266HTTPClient.h>

#define GPSLED D5   // Led in NodeMCU at pin (D5).
#define WIFILED D6  // Led in NodeMCU at pin (D6).
#define echoPin D3  // echoPin in HC-SR04 at pin (D3).
#define trigPin D4  // trigPin in HC-SR04 at pin (D4).

TinyGPSPlus gps;  // The TinyGPS++ object
HTTPClient http;  // Declare object of class HTTPClient
WiFiClient wifi;  // Declare object of class WiFiClient

SoftwareSerial ss(4, 5);  // The serial connection to the GPS device

// Const Variable
const char* ssid = "POCO X3";
const char* password = "12345678";
const String code = "MAHMUD";         // Unique Code Device
const String Url = "mnmahmud.my.id";  // IP or Server Address

// Declare Ultrasonic Sensor
long duration;
int distance;

float latitude, longitude;
String lat_str, long_str;

String getData, Link;
int calibration, volume, resultVolume;  // Calibration Earlier & Volume Bin Now

void setup() {
  // Declare LED
  pinMode(GPSLED, OUTPUT);
  pinMode(WIFILED, OUTPUT);

  // Declare HC-SR04
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  ss.begin(9600);
  delay(1000);
  Serial.begin(115200);
  WiFi.mode(WIFI_OFF);  //Prevents reconnection issue (taking too long to connect)
  delay(1000);
  WiFi.mode(WIFI_STA);  //This line hides the viewing of ESP as wifi hotspot

  WiFi.begin(ssid, password);  //Connect to your WiFi router
  Serial.println("");

  Serial.print("Connecting");
  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  //If connection successful show IP address in serial monitor
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());  //IP address assigned to your ESP

  digitalWrite(WIFILED, LOW);
  delay(500);
  digitalWrite(WIFILED, HIGH);  //Turn ON LED Wifi Yellow If WiFi Connected

  // Calibrate Ulrasonic Sensor HC-SR04
  for (int i = 0; i < 10; i++) {
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);

    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);

    duration = pulseIn(echoPin, HIGH);

    calibration = duration * 0.034 / 2;

    Serial.print("Calibration : ");
    Serial.print(calibration);
    Serial.println(" cm");

    delay(1000);  //Delay Calibration Arduino
  }

  Serial.println("");
}

void loop() {

  Serial.println("Checking GPS. ");

  while (ss.available() > 0) {
    if (gps.encode(ss.read())) {
      if (gps.location.isValid()) {
        latitude = gps.location.lat();
        lat_str = String(latitude, 6);
        longitude = gps.location.lng();
        long_str = String(longitude, 6);

        digitalWrite(GPSLED, LOW);
        delay(1000);
        digitalWrite(GPSLED, HIGH);
        delay(1000);  // Turn the LED off by making the voltage HIGH

        Serial.println("GPS Signal Found!");
        Serial.print("Latitude : ");
        Serial.println(lat_str);
        Serial.print("Longitude : ");
        Serial.println(long_str);
        Serial.println("");

        // --------------------------------------
        // IF GPS Signal Found / Sensor Ultrasonic have calibrate / Try to Send Data

        delay(1000);
        digitalWrite(trigPin, LOW);
        delayMicroseconds(2);

        digitalWrite(trigPin, HIGH);
        delayMicroseconds(10);
        digitalWrite(trigPin, LOW);

        duration = pulseIn(echoPin, HIGH);

        volume = duration * 0.034 / 2;

        Serial.print("Volume : ");
        Serial.print(volume);
        Serial.println(" cm");

        Serial.print("Caliration : ");
        Serial.print(calibration);
        Serial.println(" cm");

        /// Calibration Volume
        resultVolume = (((100 * volume) / calibration) - 100) * (-1);  // Check % volume

        Serial.print("Result Volume % calibration : ");
        Serial.print(resultVolume);
        Serial.println("%");

        //GET Data
        getData = "code='" + code + "'&volume=" + resultVolume + "&lat=" + lat_str + "&long=" + long_str;  //Note "?" //added at front
        Link = "http://" + Url + "/binTracker/create_history.php?createHistory=1&" + getData;

        http.begin(wifi, Link);  //Specify request destination

        int httpCode = http.GET();          //Send the request
        String payload = http.getString();  //Get the response payload

        Serial.println(httpCode);  //Print HTTP return code
        Serial.println(payload);   //Print request response payload

        http.end();  //Close connection
      }
    }
  }

  delay(1000);  //Delay Regular Loop
}